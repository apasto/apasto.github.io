<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Remote-Sensing on Alberto Pastorutti</title>
    <link>https://apasto.github.io/tags/remote-sensing/</link>
    <description>Recent content in Remote-Sensing on Alberto Pastorutti</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Nov 2022 20:36:52 +0100</lastBuildDate>
    
	<atom:link href="https://apasto.github.io/tags/remote-sensing/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    
    
    
    
    <item>
      <title>A dull mistery: ethernet shorted over</title>
      <link>https://apasto.github.io/a-dull-mistery-ethernet-shorted-over/</link>
      <pubDate>Fri, 25 Aug 2023 20:00:00 +0100</pubDate>
      
      <guid>https://apasto.github.io/a-dull-mistery-ethernet-shorted-over/</guid>
      <description>&lt;p&gt;Summary: a PoE powered IP camera stopped working and I have tried to figure out why. Spoiler: I get to no conclusions here, but ruling out the various options has been somewhat fun.&lt;/p&gt;
&lt;p&gt;An IP camera that I had placed on the roof suddenly stopped working after more than four years of flawless operation.
The day of the mishap was rather unremarkable: no heavy rain, not particularly warm not cold, no thunderstorms - surely not the worst day it had endured up there. For the sake of gratuitous pedantry, a Mean Time Between Failures (MTBF, sample size = 1) of 1544 days: 2018-09-20 to 2022-12-12.&lt;/p&gt;
&lt;p&gt;I took for granted that among all the links in the chain, the IP camera was the failed one.
In light of this, the solution entailed buying a new one and climbing on the roof to swap them - a rather cumbersome and a risky business even with all due precautions, which I would have been happy to avoid.&lt;/p&gt;
&lt;p&gt;The somewhat disappointing surprise after this adventure was finding out that the even the new camera was not powering on. Suspecting some mistake with crimping the 8P8C jack on the roof under a blazing August sun, arguably not the most ideal place and time for such a task, I crimped a new one - to no avail. After a disappointing trip back down, the old camera was now working fine, on the bench.
Thinning down the remaining options in this fun exercise in troubleshooting, I identified a likely culprit in the downstairs-end of the cable coming down from the roof: the Ethernet wall socket. Here it was, with a surprising &lt;em&gt;stain&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://apasto.github.io/img/poefailure/socket_with_sticker.jpg&#34; alt=&#34;8P8C RJ45 Ethernet wall socket with arcing marks&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get the wiring scheme sticker out of the way:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://apasto.github.io/img/poefailure/socket_no_sticker.jpg&#34; alt=&#34;8P8C RJ45 Ethernet wall socket with arcing marks, sticker removed&#34;&gt;&lt;/p&gt;
&lt;p&gt;Striking signs of&amp;hellip; arcing? can be seen between the wires in pair 3 (TIA/EIA 568B in use), the green and green-white wires, pins 6 and 3 in the 8P8C connector.
That discoloration affected the label and the nearby shield - however UTP cable was used, so it was likely not part of the current path.&lt;/p&gt;
&lt;p&gt;The socket is a Vimar Idea 16359 with an insert for CAT5e FTP, punchdown terminals.
This insert is somewhat close to a Keystone insert, and loosely fits in one if one insists on trying (a rather dull finding). The cable is a CAT6 UTP direct burial cable, so there is a slight mismatch con wire gauge, on the larger side.
Upon closer inspection, arcing seems to have happened on the small PCB on which the punchdown module and the actual 8P8C socket contacts are soldered on.
The punchdown seems dirty, with a thin coat of something, while the rest of the wall box is remarkably clean. A corrugated tube, laid under mortar, connects the box to a J-shaped pole (which in Italy is aptly called a &lt;em&gt;pastoral&lt;/em&gt;), following a rather common setup for a TV pole over here.&lt;/p&gt;
&lt;p&gt;Given the setup, the pole shape in particular, there is no direct path for water from the roof to the socket box, albeit moisture might run trough it and condense. Was moisture enough to do this damage? Why there are no signs of water ingress in the box?&lt;/p&gt;
&lt;p&gt;Maybe the answer should not be looked for in moisture, but in a phenomenon that rather thrives in the lack of it, instead.
The failure happened on 2022-12-12, (maybe) a dry late-fall day. Could this be a static discharge, in which the pcb in the socket acted as a spark gap? (the spark gap with the lowest breakdown of everything involved?)
However the two wires should be in a DC short both at the camera and in the PoE injector&amp;hellip; to have a look into this, let&amp;rsquo;s dig a bit more in how PoE is implemented here.
(for the sake of pedantry, we need to mention that a static discharge is not DC, which may matter)&lt;/p&gt;
&lt;p&gt;The IP camera was powered through a Tenda 802.3af/802.3at PoE switch (&lt;a href=&#34;https://www.tendacn.com/product/teg1105p-4-63w.html&#34;&gt;TEG1105P&lt;/a&gt;, &lt;a href=&#34;https://web.archive.org/web/20240301163121/https://www.tendacn.com/product/teg1105p-4-63w.html&#34;&gt;archive.org link&lt;/a&gt;), which still works fine.
It took a while to find its datasheet and relevant information: &lt;a href=&#34;https://down.tendacn.com/uploadfile/TEG1105P-4-63W/TEG1105P-4-63WDatasheet.pdf&#34;&gt;&lt;code&gt;TEG1105P-4-63WDatasheet.pdf&lt;/code&gt;&lt;/a&gt; (&lt;a href=&#34;https://web.archive.org/web/20240301162952/https://down.tendacn.com/uploadfile/TEG1105P-4-63W/TEG1105P-4-63WDatasheet.pdf&#34;&gt;archive.org link&lt;/a&gt;).
The PoE supply from the switch, which supports standard IEEE802.3at/af as an &lt;em&gt;endspan&lt;/em&gt; device, on the pairs in this setup: &amp;ldquo;12+, 36- and 45+, 78-&amp;rdquo;.
This still leaves a question open, since the switch seems able to use either mode A or mode B (see e.g. the &lt;a href=&#34;https://en.wikipedia.org/wiki/Power_over_Ethernet#Powering_devices&#34;&gt;Wikipedia entry&lt;/a&gt;), and this is negotiated when the powered devices is connected.
If the arced over pair (36) is indeed the culprit, we may infer that mode A was negotiated. The connected webcam is 100BASE-TX capable, so it would make sense to allow wiring it with just 2-pair (pairs 2 and 3) CAT5 cable.
Still, an arc between the two wires in the same pair seems unlikely! They should be at the same potential: used together (in DC) for PoE and with a low impedance DC path between the two wires in the Ethernet transformers at each end, signalling being carried out differentially.&lt;/p&gt;
&lt;p&gt;The switch also boasts a &amp;ldquo;6 kV lighting protection&amp;rdquo; and short-circuit protection.
How is the isolation between the socket pins then?
I have no insulation tester at hand, but a multimeter reads infinity between all the 8 pins except&amp;hellip; 3 and 6, unsurprisingly! The 3-6 resistance is approximately 1.2 kOhm: not a dead short, however enough to render Ethernet signaling on that pair ineffective.&lt;/p&gt;
&lt;p&gt;What happened between those two pins then? Maybe tearing the socket/pcb assembly apart and looking for other signs of damage between pairs would help - my bet is on arcing forming a faint carbon path between the affected traces.
I am leaving this for a further chapter.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>PETSC in Docker: container shared memory (solving &#34;caught signal number 7 BUS&#34;)</title>
      <link>https://apasto.github.io/petsc-in-docker-container-shared-memory-solving-caught-signal-number-7-bus/</link>
      <pubDate>Wed, 16 Nov 2022 22:45:00 +0100</pubDate>
      
      <guid>https://apasto.github.io/petsc-in-docker-container-shared-memory-solving-caught-signal-number-7-bus/</guid>
      <description>&lt;p&gt;Since the last May I have been using &lt;a href=&#34;https://underworld2.readthedocs.io/en/latest/&#34;&gt;Underworld2&lt;/a&gt; to run some thermo-mechanical models of rifted margins through time, using its nice Python API.
More on that in a following post.&lt;/p&gt;
&lt;p&gt;The suggested deployment for &amp;ldquo;usage on personal computers&amp;rdquo; of Underworld is via Docker.
The infrastructure that I am using is on a slightly larger scale, a 36-cpu virtual machine - which we may still consider a PC for these purposes.&lt;/p&gt;
&lt;p&gt;Using Docker had me skeptical at the beginning, for no valid reason apart my own ignorance.
It has proven fit for this task, pending migration to HPC infrastructure (which will involve me learning a bit about building a singularity image).&lt;/p&gt;
&lt;p&gt;In the setup I have adopted, &amp;ldquo;running a model&amp;rdquo; boils down to setting up a prototype model run in a Jupyter Notebook, converting that to a plain Python script using &lt;code&gt;jupytext&lt;/code&gt;, then calling the script with mpirun, on a given number of processes, e.g. &lt;code&gt;mpirun -np 8&lt;/code&gt;.
I will not digress on this, which merits its own post, but carrying out all the setup phase in notebooks provides an hassle-free way to define and test complex starting conditions.
Also, jupytext-converted notebooks are then copied in the model output directory and rendered (using &lt;code&gt;papermill&lt;/code&gt;) ensuring complete reproducibility and documentation of the model starting conditions.&lt;/p&gt;
&lt;p&gt;While looking for an optimum number of processes in this setup, I have incurred in the following error, when &lt;code&gt;-np&lt;/code&gt; was set larger than circa 10 (the actual number depending on the model mesh size):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[3]PETSC ERROR: Caught signal number 7 BUS: Bus Error, possibly illegal memory access
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is a larger portion of the error printout, with the repeated prefix omitted:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Caught signal number 7 BUS: Bus Error, possibly illegal memory access
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Try option -start_in_debugger or -on_error_attach_debugger
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;or see https://petsc.org/release/faq/#valgrind
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;or try http://valgrind.org on GNU/linux and Apple MacOS to find memory corruption errors
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;configure using --with-debugging=yes, recompile, link, and run 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;to get more information on the crash.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--------------------- Error Message ---------------------
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Signal received
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;See https://petsc.org/release/faq/ for trouble shooting.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Petsc Release Version 3.17.1, Apr 28, 2022 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;03_ext.py on a  named 7e468e5db1bb by Unknown Wed Nov 16 13:16:10 2022
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Configure options --with-debugging=0 --prefix=/usr/local --COPTFLAGS=&amp;#34;-g -O3&amp;#34; --CXXOPTFLAGS=&amp;#34;-g -O3&amp;#34; --FOPTFLAGS=&amp;#34;-g -O3&amp;#34; --with-petsc4py=1 --with-zlib=1 --download-hdf5=1 --download-mumps=1 --download-parmetis=1 --download-metis=1 --download-superlu=1 --download-hypre=1 --download-scalapack=1 --download-superlu_dist=1 --download-ctetgen --download-eigen --download-triangle --useThreads=0 --download-superlu=1 --with-shared-libraries --with-cxx-dialect=C++11 --with-make-np=8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#1 User provided function() at unknown file:0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Run with -malloc_debug to check if memory corruption is causing the crash.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;application called MPI_Abort(MPI_COMM_WORLD, 59) - process 3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The underlying cause was indeed trivial, however it took a while to troubleshoot:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://apasto.github.io/img/underworld_docker_shm.gif&#34; alt=&#34;gif: status of shared memory during test run&#34;&gt;&lt;/p&gt;
&lt;p&gt;What I was running into is that the container was being allocated 64 MB of shared memory, by default (&lt;a href=&#34;https://docs.docker.com/engine/reference/run/#runtime-constraints-on-resources&#34;&gt;Docker run reference&lt;/a&gt;), which ran out when the number of processes increased.
This resource provided to be quite helpful: &lt;a href=&#34;https://datawookie.dev/blog/2021/11/shared-memory-docker/&#34;&gt;datawookie.dev: Shared Memory &amp;amp; Docker&lt;/a&gt; [&lt;a href=&#34;https://web.archive.org/web/20230103130929/https://datawookie.dev/blog/2021/11/shared-memory-docker/&#34;&gt;archive.org archived link&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;Increasing the amount of shared memory allocated to the container (&lt;code&gt;--shm-size&lt;/code&gt; option in &lt;code&gt;docker run&lt;/code&gt;) solved the issue.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>A tool to isolate locally correlated signals between two arrays</title>
      <link>https://apasto.github.io/a-tool-to-isolate-locally-correlated-signals-between-two-arrays/</link>
      <pubDate>Sun, 06 Nov 2022 20:36:52 +0100</pubDate>
      
      <guid>https://apasto.github.io/a-tool-to-isolate-locally-correlated-signals-between-two-arrays/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://apasto.github.io/img/logo_linreg.png&#34; alt=&#34;decorrelate-grids logo&#34;&gt;&lt;/p&gt;
&lt;p&gt;Consider some image-like data (in the form of a &amp;ldquo;grid&amp;rdquo;, a labelled 2-D array) which can be explained at least in part by another observable.
Suppose that this relationship is linear - or can be approximated as such - and varies spatially, with a spatial scale that is larger than the grid interval.
Pending some other assumptions, we can invert this relationship in discrete windows: a &lt;em&gt;rolling 2-D linear regression&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The resulting fit, in the form of an array of regression results, can be then subtracted from our original data, ideally isolating our signal of interest with no contribution from the explanatory variable.&lt;/p&gt;
&lt;p&gt;This was designed with reduction of atmospheric delay in InSAR interferometric couples, which has a topography-dependent component.
The method, however, can be trivially generalised to other applications - after all its nature is far from complex.
All due credits for the idea to my colleague &lt;a href=&#34;https://github.com/marbarto&#34;&gt;Marco Bartola&lt;/a&gt; - as of November 2022 a PhD candidate in the &lt;a href=&#34;https://sites.units.it/geodin/&#34;&gt;research unit I am doing a postdoc in&lt;/a&gt; - and to lots of inspiring conversations with him.&lt;/p&gt;
&lt;p&gt;From the beginning, implementing this sounded quite fun to me, so after quickly setting up a working example for his project work I took it on as a spare-time collateral.
This seemed a good opportunity to write a Python module and learn how to package it, while working on it at a slower pace - something which is unlikely to happen with my own research work.
It is fun, and strict-sense fun should have no deadlines, even if I am doing it to incidentally learn something.&lt;/p&gt;
&lt;p&gt;While I could not find anything ready made already available (if that is not the case, let me know!), the idea on its own is not novel. Some specific application could be novel, indeed, thus let&amp;rsquo;s hope this turns helpful for someone else&amp;rsquo;s purposes.&lt;/p&gt;
&lt;p&gt;At the current &amp;ldquo;concept stage&amp;rdquo; (let&amp;rsquo;s tag it as &lt;a href=&#34;https://github.com/apasto/decorrelate-grids/releases/tag/v0.1.0-alpha&#34;&gt;v0.0.1-alpha&lt;/a&gt;) it is a working prototype.
Clone it, create its conda environment, and call it as a shell script.
A help printout for arguments (using &lt;a href=&#34;https://docs.python.org/3/library/argparse.html&#34;&gt;argparse&lt;/a&gt;) can be accessed with flag -h.
Being a prototype, the next changes are likely to break current behaviour and syntax.&lt;/p&gt;
&lt;p&gt;Head over to the repository for any further information: &lt;a href=&#34;https://github.com/apasto/decorrelate-grids&#34;&gt;apasto/decorrelate-grids&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Lens Correction Profile for Tamron 135mm f/2.5 03B</title>
      <link>https://apasto.github.io/lens-correction-profile-for-tamron-135mm-f/2.5-03b/</link>
      <pubDate>Tue, 22 Feb 2022 10:01:46 +0100</pubDate>
      
      <guid>https://apasto.github.io/lens-correction-profile-for-tamron-135mm-f/2.5-03b/</guid>
      <description>&lt;p&gt;I have been looking for a vintage prime telephoto lens for a while, until I found this nice 135mm f/2.5 - not top notch, but close enough to more expensive similar vintage primes.
Find more about it here: &lt;a href=&#34;https://www.pentaxforums.com/userreviews/tamron-adaptall-2-135mm-f-2-5-03b.html&#34;&gt;pentaxforums.com&lt;/a&gt; (&lt;a href=&#34;https://web.archive.org/web/20220222084506/https://www.pentaxforums.com/userreviews/tamron-adaptall-2-135mm-f-2-5-03b.html&#34;&gt;archive.org link&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;As expected with such a lens, chromatic aberration (CA) is an issue, especially wide open.
Blue/red transverse CA is the most striking&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://apasto.github.io/img/lensprofile/135_ca_defringe_example_checkerboard.jpg&#34; alt=&#34;Before and after lens correction on checkerboard, upper right corner at f2.5&#34;&gt;&lt;/p&gt;
&lt;p&gt;Above: checkerboard calibration chart.
Before (left) and after (right) applying the lens profile corrections in ACR.
Upper right corner of frame.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://apasto.github.io/img/lensprofile/135_ca_defringe_example_real.jpg&#34; alt=&#34;Before and after lens correction on a real world example against a bright background&#34;&gt;&lt;/p&gt;
&lt;p&gt;Above: real-world test: subject (a whip antenna) against a bright background, slightly off focus.
Before (left) and after (right) applying the lens profile corrections in ACR.
Upper right corner of frame.&lt;/p&gt;
&lt;p&gt;Correction may be applied in postprocessing, but it is tedious and for sure having a previously calibrated &lt;em&gt;lens profile&lt;/em&gt; take care of most of it is appreciated.
I was curious in trying the &lt;a href=&#34;https://helpx.adobe.com/camera-raw/digital-negative.html#Adobe_Lens_Profile_Creator&#34;&gt;Adobe Lens Profile Creator&lt;/a&gt; (&lt;a href=&#34;https://web.archive.org/web/20220127035413/https://helpx.adobe.com/camera-raw/digital-negative.html&#34;&gt;archive.org link&lt;/a&gt;), so I printed one of the provided checkerboard charts and started shooting.&lt;/p&gt;
&lt;p&gt;Find the lcp lens profile here: &lt;a href=&#34;https://github.com/apasto/lensprofile_tamron_03B&#34;&gt;apasto/lensprofile_tamron_03B&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the README of the same repository I am also providing some notes on &lt;a href=&#34;https://github.com/apasto/lensprofile_tamron_03B?tab=readme-ov-file#collateral-setting-aperture-metadata-in-exif&#34;&gt;setting the lens and aperture metadata in EXIF&lt;/a&gt; when using a manual lens, using &lt;a href=&#34;https://exiv2.org/index.html&#34;&gt;&lt;code&gt;exiv2&lt;/code&gt;&lt;/a&gt;.
That part includes the results of some research and substantial trial and error on the Exif parameters.
An example batch call to &lt;code&gt;exiv2&lt;/code&gt; to set the metadata of the lens in questions (replacing the unknown lens reported by the camera) can also be found.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Bistatic passive radar with an RTLSDR</title>
      <link>https://apasto.github.io/bistatic-passive-radar-with-an-rtlsdr/</link>
      <pubDate>Fri, 09 Jan 2015 14:00:00 +0100</pubDate>
      
      <guid>https://apasto.github.io/bistatic-passive-radar-with-an-rtlsdr/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/vD6mceH40mg&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;In the video above, recorded from &lt;a href=&#34;https://www.baudline.com/&#34;&gt;baudline&lt;/a&gt;, I am receiving the direct and reflected pulses from an L-band radar on &lt;a href=&#34;https://geohack.toolforge.org/geohack.php?language=en&amp;amp;params=45.284951_N_14.201965_E_type:mountain&#34;&gt;Učka, Croatia&lt;/a&gt; - a Lockheed Martin &lt;a href=&#34;https://www.radartutorial.eu/19.kartei/02.surv/karte007.en.html&#34;&gt;AN/FPS-117&lt;/a&gt; at the time of the recording (summer 2014).
The receiver was 83 km away, with clear LOS to the radar site (&lt;a href=&#34;https://maps.app.goo.gl/DYp7V3N5L1m4fdLv9&#34;&gt;N45.2868, E014.2027&lt;/a&gt;, &lt;a href=&#34;https://maps.app.goo.gl/mWEvE5yQaurek5PG8&#34;&gt;Street View&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The center frequency of the pulse-compressed &lt;em&gt;blip&lt;/em&gt; is 1258 MHz, which at the time seemed to be one of the four frequency the radar was transmitting on.
The receiver is a RTL-SDR dongle bought in 2013 (on which you can read more about &lt;a href=&#34;https://www.rtl-sdr.com/about-rtl-sdr/&#34;&gt;here&lt;/a&gt;), with a R820T tuner IC, connected to a 2-dipole collinear array (tuned for 403 MHz) with approx. 7 m of Belden 1694A RG-6 coax.&lt;/p&gt;
&lt;p&gt;The output of the command line tool rtl_sdr was piped to baudline (following the &lt;a href=&#34;https://dm5ms.blogspot.com/2012/06/connecting-baudline-to-rtl-sdr.html&#34;&gt;useful information by DM5MS&lt;/a&gt;). The IQ sampling rate is 2 MHz; the transform is a complex STFT (size is 2048 samples, Blackman window).
The video shows a 0.008x speed playback of 15 ms of actual recording.
The reflected pulses become more time-local when using a shorter transform window size, as expected, e.g. 512 samples:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://apasto.github.io/img/passiveradar/baudline_smaller_window.png&#34; alt=&#34;waterfall-spectrogram-effect-of-smaller-window&#34;&gt;&lt;/p&gt;
&lt;p&gt;The waveform seems a rather nice example of &lt;a href=&#34;https://www.radartutorial.eu/08.transmitters/Intrapulse%20Modulation.en.html&#34;&gt;pulse compression&lt;/a&gt; in action:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://apasto.github.io/img/passiveradar/baudline_with_waveform.png&#34; alt=&#34;waveform-and-waterfall-spectrogram-with-pulse-compression&#34;&gt;&lt;/p&gt;
&lt;p&gt;The video was recorded from screen with VLC, the audio piped to stdout and saved, then audio and video were synced in Blender.&lt;/p&gt;
&lt;h2 id=&#34;a-detection-attempt&#34;&gt;A detection attempt&lt;/h2&gt;
&lt;p&gt;The direct-reflected delay of the event shown in the video is approx 278 µs, which would be compatible with a receiver-to-target distance of 42 km, in a simple 2D along-beam normal incidence model.
In other words: assuming that the target lies on the extension of the line that connects the radar to the receiver.
If we allow for the target to be slightly off beam, the geometry of the problem becomes less dull:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://apasto.github.io/img/passiveradar/passive_radar_geometry.png&#34; alt=&#34;sketch-of-the-geometry-of-2D-bistatic-radar&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the sketch above (author: myself, license: CC0), we can see that the locus of reflectors satisfying the delay along the transmitter-plane-receiver T-P-R path (with respect to the T-R &lt;em&gt;direct path&lt;/em&gt;) is an ellipse, provided that the three points lie on a plane - since they do not, the solution becomes an ellipsoid.
The trivial derivation is left as an exercise.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s keep in mind that this off-angle cannot be extremely large: it is limited by the transmitter antenna beamwidth - unless the receiver is so close to the transmitting radar that all the transmitted pulses, even when the dish is pointing elsewhere, are above its noise floor (out of experience: it works).
Interestingly, also the backscatter of the target from these unusual aspects comes into the model, something that is exploited in other context, unsurprisingly.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s another fainter echo closer to the pulse - it may be another target or a time-sidelobe of the main pulse (a side effect of pulse compression?).
Anyway, I must state that I have no formal knowledge on these topics. So you&amp;rsquo;d better take all this with a grain of salt ;) and go check it on a more reputable source.&lt;/p&gt;
&lt;p&gt;I am quite happy to see this was featured on the &lt;a href=&#34;https://www.rtl-sdr.com/analyzing-radar-pulses-baudline-rtl-sdr/&#34;&gt;RTL-SDR.com blog on January 12, 2015&lt;/a&gt; and mentioned sometime later on &lt;a href=&#34;https://www.reddit.com/r/RTLSDR/comments/2zkwaq/comment/cpjwe1m/&#34;&gt;r/rtlsdr&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The image below shows a later attempt, with an L-band bi-quad antenna out in the field.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://apasto.github.io/img/passiveradar/kremenjak_biquad_passive_radar.jpg&#34; alt=&#34;later-field-setup-kremenjak-biquad-antenna&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;further-work&#34;&gt;Further work&lt;/h2&gt;
&lt;p&gt;This has been a nice and fun experiment, however it needs hand picking of events and measuring delays.
Also, it does not leverage the advantages of pulse compression in any way.
It would be nice to try some processing on the received pulses (deconvoluting them with received direct pulse?), then to move on with automated detection.
Alas, I feel that I do not have the knowledge nor the time to embark in such a project.
Is anyone willing to?&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>RSS feed to a dot matrix printer</title>
      <link>https://apasto.github.io/rss-feed-to-a-dot-matrix-printer/</link>
      <pubDate>Tue, 07 Oct 2014 14:00:00 +0200</pubDate>
      
      <guid>https://apasto.github.io/rss-feed-to-a-dot-matrix-printer/</guid>
      <description>&lt;p&gt;This little project has turned out as fun as it&amp;rsquo;s been noisy (rather).
Not much to showcase, but I cannot find any reason to get rid of it either.&lt;/p&gt;
&lt;p&gt;A bash script to turn an RSS news feed in escape-formatted dot-matrix printer text.
Or: a questionable waste of time, continuous-form paper, and ink ribbon.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/SjZg6AQBymY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;p&gt;Quoting the video caption:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Those escape sequences that look like line noise are Epson ESC/P control codes, to which my printer (a Citizen 120D+) is partially compliant.&lt;/p&gt;
&lt;p&gt;Someday, somehow, I’ll turn all those sed calls in a nice awk script. Apart from syntax cleanliness, a big issue is reverse ordering the &lt;code&gt;title-desc-pubDate&lt;/code&gt; tuples so the newest headlines are printed last, both in the zero-time print and the updates. Feel free to edit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is definitely not the right way to do it and catching all the bad shell scripting practices may be a interesting code review exercise, now.
Anyway, this mess seems to be still working (see the comments on the YouTube video above).&lt;/p&gt;
&lt;p&gt;More descriptive comments would have helped, particularly for all the escape codes (all those &lt;code&gt;\\e\\x&lt;/code&gt;-something), which are in the printers own ESC/P dialect (from its original spiral-bound manual, of which I only had the French version - &lt;a href=&#34;https://frinkiac.com/caption/S10E19/283899&#34;&gt;relevant Simpsons quote&lt;/a&gt;).
Nowadays I do not have this printer at hand (and I vowed to myself I won&amp;rsquo;t be hoarding others) therefore further testing is out of the question :)&lt;/p&gt;
&lt;p&gt;Keep in mind that the argument provided to &lt;code&gt;lpr -P&lt;/code&gt;, variable &lt;code&gt;cups_raw_queue&lt;/code&gt; (e.g. &lt;code&gt;lpt-raw&lt;/code&gt;) should match the name of a local CUPS printer set as a raw queue on the parallel port (or adapter) device.
This is a feature which is planned to be deprecated, as of March 2018 - see cups issue &lt;a href=&#34;https://github.com/apple/cups/issues/5271&#34;&gt;#5271&lt;/a&gt;.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/apasto/b6c3d9cfee43cd74309520b886c7b0c3.js?file=LPnewswire.sh&#34;&gt;&lt;/script&gt;

</description>
    </item>
    
    
  </channel>
</rss>
